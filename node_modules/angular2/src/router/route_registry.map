{"version":3,"sources":["route_registry.js"],"names":[],"mappings":"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","file":"angular2/src/router/route_registry.js","sourcesContent":["import {RouteRecognizer, RouteMatch} from './route_recognizer';\nimport {Instruction, noopInstruction} from './instruction';\nimport {List, ListWrapper, Map, MapWrapper, StringMap, StringMapWrapper} from 'angular2/src/facade/collection';\nimport {isPresent, isBlank, isType, StringWrapper, BaseException} from 'angular2/src/facade/lang';\nimport {RouteConfig} from './route_config_impl';\nimport {reflector} from 'angular2/src/reflection/reflection';\n\n/**\n * The RouteRegistry holds route configurations for each component in an Angular app.\n * It is responsible for creating Instructions from URLs, and generating URLs based on route and parameters.\n */\nexport class RouteRegistry {\n  _rules:Map<any, RouteRecognizer>;\n\n  constructor() {\n    this._rules = MapWrapper.create();\n  }\n\n  /**\n   * Given a component and a configuration object, add the route to this registry\n   */\n  config(parentComponent, config:StringMap<string, any>): void {\n    if (!StringMapWrapper.contains(config, 'path')) {\n      throw new BaseException('Route config does not contain \"path\"');\n    }\n\n    if (!StringMapWrapper.contains(config, 'component') &&\n        !StringMapWrapper.contains(config, 'components') &&\n        !StringMapWrapper.contains(config, 'redirectTo')) {\n      throw new BaseException('Route config does not contain \"component,\" \"components,\" or \"redirectTo\"');\n    }\n\n    var recognizer:RouteRecognizer = MapWrapper.get(this._rules, parentComponent);\n\n    if (isBlank(recognizer)) {\n      recognizer = new RouteRecognizer();\n      MapWrapper.set(this._rules, parentComponent, recognizer);\n    }\n\n    config = normalizeConfig(config);\n\n    if (StringMapWrapper.contains(config, 'redirectTo')) {\n      recognizer.addRedirect(config['path'], config['redirectTo']);\n      return;\n    }\n\n    var components = config['components'];\n    StringMapWrapper.forEach(components, (component, _) => this.configFromComponent(component));\n\n    recognizer.addConfig(config['path'], config, config['as']);\n  }\n\n  /**\n   * Reads the annotations of a component and configures the registry based on them\n   */\n  configFromComponent(component): void {\n    if (!isType(component)) {\n      return;\n    }\n\n    // Don't read the annotations from a type more than once â€“\n    // this prevents an infinite loop if a component routes recursively.\n    if (MapWrapper.contains(this._rules, component)) {\n      return;\n    }\n    var annotations = reflector.annotations(component);\n    if (isPresent(annotations)) {\n      for (var i=0; i<annotations.length; i++) {\n        var annotation = annotations[i];\n\n        if (annotation instanceof RouteConfig) {\n          ListWrapper.forEach(annotation.configs, (config) => this.config(component, config));\n        }\n      }\n    }\n  }\n\n\n  /**\n   * Given a URL and a parent component, return the most specific instruction for navigating\n   * the application into the state specified by the\n   */\n  recognize(url:string, parentComponent): Instruction {\n    var componentRecognizer = MapWrapper.get(this._rules, parentComponent);\n    if (isBlank(componentRecognizer)) {\n      return null;\n    }\n\n    // Matches some beginning part of the given URL\n    var possibleMatches = componentRecognizer.recognize(url);\n\n    // A list of instructions that captures all of the given URL\n    var fullSolutions = ListWrapper.create();\n\n    for (var i = 0; i < possibleMatches.length; i++) {\n      var candidate : RouteMatch = possibleMatches[i];\n\n      // if the candidate captures all of the URL, add it to our list of solutions\n      if (candidate.unmatchedUrl.length == 0) {\n        ListWrapper.push(fullSolutions, routeMatchToInstruction(candidate, parentComponent));\n      } else {\n\n        // otherwise, recursively match the remaining part of the URL against the component's children\n        var children = StringMapWrapper.create(),\n            allChildrenMatch = true,\n            components = StringMapWrapper.get(candidate.handler, 'components');\n\n        var componentNames = StringMapWrapper.keys(components);\n        for (var nameIndex = 0; nameIndex < componentNames.length; nameIndex++) {\n          var name = componentNames[nameIndex];\n          var component = StringMapWrapper.get(components, name);\n\n          var childInstruction = this.recognize(candidate.unmatchedUrl, component);\n          if (isPresent(childInstruction)) {\n            childInstruction.params = candidate.params;\n            children[name] = childInstruction;\n          } else {\n            allChildrenMatch = false;\n            break;\n          }\n        }\n\n        if (allChildrenMatch) {\n          ListWrapper.push(fullSolutions, new Instruction({\n            component: parentComponent,\n            children: children,\n            matchedUrl: candidate.matchedUrl,\n            parentSpecificity: candidate.specificity\n          }));\n        }\n      }\n    }\n\n    if (fullSolutions.length > 0) {\n      var mostSpecificSolution = fullSolutions[0];\n      for (var solutionIndex = 1; solutionIndex < fullSolutions.length; solutionIndex++) {\n        var solution = fullSolutions[solutionIndex];\n        if (solution.specificity > mostSpecificSolution.specificity) {\n          mostSpecificSolution = solution;\n        }\n      }\n\n      return mostSpecificSolution;\n    }\n\n    return null;\n  }\n\n  generate(name:string, params:StringMap<string, string>, hostComponent): string {\n    //TODO: implement for hierarchical routes\n    var componentRecognizer = MapWrapper.get(this._rules, hostComponent);\n    return isPresent(componentRecognizer) ? componentRecognizer.generate(name, params) : null;\n  }\n}\n\nfunction routeMatchToInstruction(routeMatch:RouteMatch, parentComponent): Instruction {\n  var children = StringMapWrapper.create();\n  var components = StringMapWrapper.get(routeMatch.handler, 'components');\n  StringMapWrapper.forEach(components, (component, outletName) => {\n    children[outletName] = new Instruction({\n      component: component,\n      params: routeMatch.params,\n      parentSpecificity: 0\n    });\n  });\n  return new Instruction({\n    component: parentComponent,\n    children: children,\n    matchedUrl: routeMatch.matchedUrl,\n    parentSpecificity: routeMatch.specificity\n  });\n}\n\n\n/*\n * Given a config object:\n * { 'component': Foo }\n * Returns a new config object:\n * { components: { default: Foo } }\n *\n * If the config object does not contain a `component` key, the original\n * config object is returned.\n */\nfunction normalizeConfig(config:StringMap<string, any>): StringMap<string, any> {\n  if (!StringMapWrapper.contains(config, 'component')) {\n    return config;\n  }\n  var newConfig = {\n    'components': {\n      'default': config['component']\n    }\n  };\n\n  StringMapWrapper.forEach(config, (value, key) => {\n    if (key != 'component' && key != 'components') {\n      newConfig[key] = value;\n    }\n  });\n\n  return newConfig;\n}\n"]}