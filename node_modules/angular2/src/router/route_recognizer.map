{"version":3,"sources":["route_recognizer.js"],"names":[],"mappings":"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","file":"angular2/src/router/route_recognizer.js","sourcesContent":["import {RegExp, RegExpWrapper, StringWrapper, isPresent, BaseException} from 'angular2/src/facade/lang';\nimport {Map, MapWrapper, List, ListWrapper, StringMap, StringMapWrapper} from 'angular2/src/facade/collection';\n\nimport {PathRecognizer} from './path_recognizer';\n\n/**\n * `RouteRecognizer` is responsible for recognizing routes for a single component.\n * It is consumed by `RouteRegistry`, which knows how to recognize an entire hierarchy of components.\n */\nexport class RouteRecognizer {\n  names:Map<string, PathRecognizer>;\n  redirects:Map<string, string>;\n  matchers:Map<RegExp, PathRecognizer>;\n\n  constructor() {\n    this.names = MapWrapper.create();\n    this.matchers = MapWrapper.create();\n    this.redirects = MapWrapper.create();\n  }\n\n  addRedirect(path:string, target:string): void {\n    MapWrapper.set(this.redirects, path, target);\n  }\n\n  addConfig(path:string, handler:any, alias:string = null): void {\n    var recognizer = new PathRecognizer(path, handler);\n    MapWrapper.forEach(this.matchers, (matcher, _) => {\n      if (recognizer.regex.toString() == matcher.regex.toString()) {\n        throw new BaseException(`Configuration '${path}' conflicts with existing route '${matcher.path}'`);\n      }\n    });\n    MapWrapper.set(this.matchers, recognizer.regex, recognizer);\n    if (isPresent(alias)) {\n      MapWrapper.set(this.names, alias, recognizer);\n    }\n  }\n\n\n  /**\n   * Given a URL, returns a list of `RouteMatch`es, which are partial recognitions for some route.\n   *\n   */\n  recognize(url:string):List<RouteMatch> {\n    var solutions = ListWrapper.create();\n\n    MapWrapper.forEach(this.redirects, (target, path) => {\n      //TODO: \"/\" redirect case\n      if (StringWrapper.startsWith(url, path)) {\n        url = target + StringWrapper.substring(url, path.length);\n      }\n    });\n\n    MapWrapper.forEach(this.matchers, (pathRecognizer, regex) => {\n      var match;\n      if (isPresent(match = RegExpWrapper.firstMatch(regex, url))) {\n        //TODO(btford): determine a good generic way to deal with terminal matches\n        var matchedUrl = '/';\n        var unmatchedUrl = '';\n        if (url != '/') {\n          matchedUrl = match[0];\n          unmatchedUrl = StringWrapper.substring(url, match[0].length);\n        }\n        ListWrapper.push(solutions, new RouteMatch({\n          specificity: pathRecognizer.specificity,\n          handler: pathRecognizer.handler,\n          params: pathRecognizer.parseParams(url),\n          matchedUrl: matchedUrl,\n          unmatchedUrl: unmatchedUrl\n        }));\n      }\n    });\n\n    return solutions;\n  }\n\n  hasRoute(name:string): boolean {\n    return MapWrapper.contains(this.names, name);\n  }\n\n  generate(name:string, params:any): string {\n    var pathRecognizer = MapWrapper.get(this.names, name);\n    return isPresent(pathRecognizer) ? pathRecognizer.generate(params) : null;\n  }\n}\n\nexport class RouteMatch {\n  specificity:number;\n  handler:StringMap<string, any>;\n  params:StringMap<string, string>;\n  matchedUrl:string;\n  unmatchedUrl:string;\n  constructor({specificity, handler, params, matchedUrl, unmatchedUrl}:\n    {specificity:number, handler:StringMap, params:StringMap, matchedUrl:string, unmatchedUrl:string} = {}) {\n\n    this.specificity = specificity;\n    this.handler = handler;\n    this.params = params;\n    this.matchedUrl = matchedUrl;\n    this.unmatchedUrl = unmatchedUrl;\n  }\n}\n"]}