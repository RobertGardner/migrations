import {Promise,
  PromiseWrapper} from 'angular2/src/facade/async';
import {isBlank,
  isPresent} from 'angular2/src/facade/lang';
import {Directive} from 'angular2/src/core/annotations_impl/annotations';
import {Attribute} from 'angular2/src/core/annotations_impl/di';
import {DynamicComponentLoader,
  ComponentRef,
  ElementRef} from 'angular2/core';
import {Injector,
  bind} from 'angular2/di';
import * as routerMod from './router';
import {Instruction,
  RouteParams} from './instruction';
export class RouterOutlet {
  constructor(elementRef, loader, router, injector, nameAttr) {
    if (isBlank(nameAttr)) {
      nameAttr = 'default';
    }
    this._loader = loader;
    this._parentRouter = router;
    this._elementRef = elementRef;
    this._injector = injector;
    this._childRouter = null;
    this._componentRef = null;
    this._currentInstruction = null;
    this._parentRouter.registerOutlet(this, nameAttr);
  }
  activate(instruction) {
    if ((instruction == this._currentInstruction) || instruction.reuse && isPresent(this._childRouter)) {
      return this._childRouter.commit(instruction);
    }
    this._currentInstruction = instruction;
    this._childRouter = this._parentRouter.childRouter(instruction.component);
    var outletInjector = this._injector.resolveAndCreateChild([bind(RouteParams).toValue(new RouteParams(instruction.params)), bind(routerMod.Router).toValue(this._childRouter)]);
    if (isPresent(this._componentRef)) {
      this._componentRef.dispose();
    }
    return this._loader.loadNextToExistingLocation(instruction.component, this._elementRef, outletInjector).then((componentRef) => {
      this._componentRef = componentRef;
      return this._childRouter.commit(instruction);
    });
  }
  deactivate() {
    return (isPresent(this._childRouter) ? this._childRouter.deactivate() : PromiseWrapper.resolve(true)).then((_) => this._componentRef.dispose());
  }
  canDeactivate(instruction) {
    return PromiseWrapper.resolve(true);
  }
}
Object.defineProperty(RouterOutlet, "annotations", {get: function() {
    return [new Directive({selector: 'router-outlet'})];
  }});
Object.defineProperty(RouterOutlet, "parameters", {get: function() {
    return [[ElementRef], [DynamicComponentLoader], [routerMod.Router], [Injector], [String, new Attribute('name')]];
  }});
Object.defineProperty(RouterOutlet.prototype.activate, "parameters", {get: function() {
    return [[Instruction]];
  }});
Object.defineProperty(RouterOutlet.prototype.canDeactivate, "parameters", {get: function() {
    return [[Instruction]];
  }});
//# sourceMappingURL=router_outlet.js.map

//# sourceMappingURL=./router_outlet.map